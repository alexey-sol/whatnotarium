version: "3.3"

services:
    client:
        networks:
            - geek-regime
        depends_on:
            - server
            - postgres
            - redis
        ports:
            - ${CLIENT_PORT_EXTERNAL}:${CLIENT_PORT}
        environment:
            - NODE_ENV
    server:
        networks:
            - geek-regime
        depends_on:
            - postgres
            - redis
        ports:
            - ${SERVER_PORT_EXTERNAL}:${SERVER_PORT}
        environment:
            - GOOGLE_CLIENT_ID
            - GOOGLE_CLIENT_SECRET
            - GOOGLE_OAUTH_REDIRECT_URI
            - NODE_ENV
            - POSTGRES_DB
            - POSTGRES_DB_TEST
            - POSTGRES_HOST
            - POSTGRES_PASSWORD
            - POSTGRES_PORT
            - POSTGRES_USER
            - PROJECT_NAME_FULL
            - PROJECT_NAME_SHORT
            - REDIS_HOST
            - REDIS_PORT
            - SENDER_EMAIL
            - SENDGRID_API_KEY
            - SERVER_PORT
            - SERVER_PORT_EXTERNAL
            - SESSION_NAME
            - SESSION_SECRET
            - YANDEX_CLIENT_ID
            - YANDEX_CLIENT_SECRET
    postgres:
        image: postgres:12.1-alpine
        restart: always
        volumes:
            - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
            - postgres-data:${POSTGRES_DATA_PATH}
        networks:
            - geek-regime
        ports:
            - ${POSTGRES_PORT_EXTERNAL}:${POSTGRES_PORT}
        environment:
            - PGDATA=${POSTGRES_DATA_PATH}
            - POSTGRES_DB
            - POSTGRES_DB_TEST
            - POSTGRES_PASSWORD
            - POSTGRES_USER
    redis:
        image: redis:5.0.7-alpine
        command: ["redis-server", "--appendonly", "yes"]
        volumes:
            - redis-data:/data
        networks:
            - geek-regime

networks:
    geek-regime:
        driver: bridge

volumes:
    postgres-data:
        driver: local
    redis-data:
        driver: local
